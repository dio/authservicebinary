# Include versions of tools we build or fetch on-demand.
include Tools.mk

# Root dir returns absolute path of current directory. It has a trailing "/".
root_dir := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

# Currently we resolve it using which. But more sophisticated approach is to use infer GOROOT.
go     := $(shell which go)
goarch := $(shell $(go) env GOARCH)
goexe  := $(shell $(go) env GOEXE)
goos   := $(shell $(go) env GOOS)

# Local cache directory.
CACHE_DIR ?= $(root_dir).cache

# Go tools directory holds the binaries of Go-based tools.
go_tools_dir := $(CACHE_DIR)/tools/go
# Prepackaged tools may have more than precompiled binaries, e.g. for protoc, it also has an include
# directory which contains well-known proto files: https://github.com/protocolbuffers/protobuf/tree/master/src/google/protobuf.
prepackaged_tools_dir := $(CACHE_DIR)/tools/prepackaged

export PATH := $(go_tools_dir):$(prepackaged_tools_dir)/bin:$(PATH)

# Pre-packaged targets.
clang-format := $(prepackaged_tools_dir)/bin/clang-format
protoc       := $(prepackaged_tools_dir)/bin/protoc

buf           := $(go_tools_dir)/buf
golangci-lint := $(go_tools_dir)/golangci-lint
goimports     := $(go_tools_dir)/goimports

# Assorted tools required for processing proto files.
proto_tools := \
	$(buf)

# We cache the deps fetched by buf locally (in-situ) by setting BUF_CACHE_DIR
# https://docs.buf.build/bsr/overview#module-cache, so it can be referenced by other tools.
export BUF_CACHE_DIR := $(root_dir).cache/buf
BUF_V1_MODULE_DATA   := $(BUF_CACHE_DIR)/v1/module/data/buf.build

gen: $(BUF_V1_MODULE_DATA)
	@$(buf) generate

authservice_dir := $(root_dir)authservice
# BUF_V1_MODULE_DATA can only be generated by buf generate or build.
# Note that since we use newer buf binary, the buf.lock contains "version: v1" entry which is not
# backward compatible with older version of buf.
$(BUF_V1_MODULE_DATA): $(authservice_dir)/buf.yaml $(authservice_dir)/buf.lock $(proto_tools)
	@$(buf) lint
	@$(buf) build

# Catch all rules for Go-based tools.
$(go_tools_dir)/%:
	@GOBIN=$(go_tools_dir) go install $($(notdir $@)@v)

# Install protoc from github.com/protocolbuffers/protobuf. We don't support win32 yet as this script
# will fail.
protoc-version                     = $(subst github.com/protocolbuffers/protobuf@v,-,$($(notdir $1)@v))
protoc-download-archive-url-prefix = https://$(subst @,/releases/download/,$($(notdir $1)@v))/protoc$(call protoc-version,$1)
protoc-download-archive-name       = $(if $(findstring $(goos),darwin),osx-x86_64.zip,linux-x86_64.zip)
protoc_zip                         = $(prepackaged_tools_dir)/bin/protoc.zip
$(protoc):
	@printf "$(ansi_format_dark)" tools "installing $($(notdir $@)@v)..."
	@mkdir -p $(dir $@)
	@curl -sSL $(call protoc-download-archive-url-prefix,$@)-$(call protoc-download-archive-name) -o $(protoc_zip)
	@unzip -qq $(protoc_zip) -d $(prepackaged_tools_dir)
	@rm -f $(protoc_zip)
	@printf "$(ansi_format_bright)" tools "ok"

# Install clang-format from https://github.com/angular/clang-format. We don't support win32 yet as
# this script will fail.
clang-format-download-archive-url = https://$(subst @,/archive/refs/tags/,$($(notdir $1)@v)).tar.gz
clang-format-dir                  = $(subst github.com/angular/clang-format@v,clang-format-,$($(notdir $1)@v))
$(clang-format):
	@printf "$(ansi_format_dark)" tools "installing $($(notdir $@)@v)..."
	@mkdir -p $(dir $@)
	@curl -sSL $(call clang-format-download-archive-url,$@) | tar xzf - -C $(prepackaged_tools_dir)/bin \
		--strip 3 $(call clang-format-dir,$@)/bin/$(goos)_x64
	@printf "$(ansi_format_bright)" tools "ok"
